Refactor WebSocket Events

  A. Backend - Thêm event handlers mới:

  File: backend/internal/interface/http/web_socket_handle.go

  Thêm vào switch msg.Type (line 108):

  case "login":
      // User đã login qua API, giờ register WebSocket
      log.Printf("User %s logged in via WebSocket", client.ID)
      // Hub đã register rồi ở line 63, chỉ cần gửi online users list
      onlineUsers := h.hub.GetOnlineUser()
      loginResponse := ws.Message{
          Type:      "online_users",
          SenderID:  client.ID,
          Messeage:  strings.Join(onlineUsers, ","), // Hoặc JSON encode
          CreatedAt: time.Now().Unix(),
      }
      loginJSON, _ := json.Marshal(loginResponse)
      client.Send <- loginJSON

  case "logout":
      log.Printf("User %s logging out", client.ID)
      h.hub.Unregister <- client
      client.Conn.Close()

  case "new_conversation":
      log.Printf("New conversation created: %s", msg.ConversationID)
      // Auto join conversation cho cả 2 participants
      // Lấy participants từ conversation (cần query DB hoặc từ message)
      // Tạm thời join user hiện tại
      h.hub.JoinConversation(msg.ConversationID, client.ID)

  ---
  B. Frontend - Gửi events:

  File: frontend/services/websocket.ts

  Thêm methods:

  login(userId: string): void {
    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) return;

    const message = {
      type: 'login',
      sender_id: userId,
      conversation_id: '',
      messeage: '',
      created_at: Math.floor(Date.now() / 1000),
    };
    this.ws.send(JSON.stringify(message));
  }

  logout(userId: string): void {
    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) return;

    const message = {
      type: 'logout',
      sender_id: userId,
      conversation_id: '',
      messeage: '',
      created_at: Math.floor(Date.now() / 1000),
    };
    this.ws.send(JSON.stringify(message));
  }

  notifyNewConversation(conversationId: string, participants: string[]): void {       
    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) return;

    const message = {
      type: 'new_conversation',
      conversation_id: conversationId,
      sender_id: participants[0], // Current user
      messeage: participants.join(','), // All participant IDs
      created_at: Math.floor(Date.now() / 1000),
    };
    this.ws.send(JSON.stringify(message));
  }

  ---
  C. Frontend - Gọi events:

  File: frontend/hooks/useWebSocket.ts

  Sau khi connect thành công (line 49-51):

  await wsService.connect(token);
  setIsConnected(true);
  setError(null);

  // GỬI LOGIN EVENT
  if (userId) {
    wsService.login(userId);
  }

  File: frontend/components/chat/ChatPage.tsx

  Khi tạo conversation mới (line 147):

  const newConvData = await api.createConversation(friend.phone, accessToken);        
  const newConversation: Conversation = {
    id: newConvData.id,
    participants: [user!, friend],
    name: friend.username
  };

  // GỬI NEW_CONVERSATION EVENT
  if (isConnected && user?.user_id && friend.user_id) {
    wsService.notifyNewConversation(newConvData.id, [user.user_id,
  friend.user_id]);
  }

  ---
  Bước 3: Fix vấn đề JOIN CONVERSATION

  Vấn đề cốt lõi: Conversation được tạo nhưng participants chưa join vào Hub!

  Giải pháp 1: Auto-join khi tạo conversation (Backend)

  File: backend/internal/interface/http/web_socket_handle.go, case
  new_conversation:

  case "new_conversation":
      // msg.Messeage chứa "user1_id,user2_id"
      participants := strings.Split(msg.Messeage, ",")
      for _, participantID := range participants {
          h.hub.JoinConversation(msg.ConversationID, participantID)
      }
      log.Printf("Auto-joined %d participants to conversation %s",
  len(participants), msg.ConversationID)

  Giải pháp 2: Fetch conversations và auto-join (Frontend)

  File: frontend/components/chat/ChatPage.tsx, sau khi fetch conversations:

  useEffect(() => {
    if (conversations.length > 0 && user?.user_id && isConnected) {
      // Auto join tất cả conversations
      conversations.forEach(conv => {
        wsService.joinConversation(conv.id, user.user_id);
      });
    }
  }, [conversations, user?.user_id, isConnected]);

  ---
  Bước 4: Test flow

  1. Login → Connect WebSocket → Gửi login event → Nhận online_users
  2. Tạo conversation → Gửi new_conversation event → Auto join participants
  3. Gửi message → Broadcast success (vì đã join)
  4. Logout → Gửi logout event → Unregister